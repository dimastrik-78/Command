//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/_Source/Command/InputSystem/Listener.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Listener : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Listener()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Listener"",
    ""maps"": [
        {
            ""name"": ""Input"",
            ""id"": ""7bbc982b-25d5-4808-b0f7-0d79c0a4daaa"",
            ""actions"": [
                {
                    ""name"": ""Spawn"",
                    ""type"": ""Button"",
                    ""id"": ""a80b0108-134b-4b0b-9b4e-42da44f1e202"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Teleport"",
                    ""type"": ""Button"",
                    ""id"": ""a895f84b-7ab9-4b78-a378-3b4ba5dd8b4a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Complete"",
                    ""type"": ""Button"",
                    ""id"": ""1e2179a5-6ad3-4122-aa97-4f6689d0ce97"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Undo"",
                    ""type"": ""Button"",
                    ""id"": ""d3937a5e-9c9e-4d6e-9d08-935d8241af5c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2b37c7bd-e0c2-46d0-8878-9faaf8a20ed8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spawn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32a9ef03-d2f7-41fc-871f-27821695397f"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Complete"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c23b002-77d7-471a-b745-1ec0f364956c"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Teleport"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a16ee7e4-a648-4475-94ed-fca087493cf0"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Undo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Input
        m_Input = asset.FindActionMap("Input", throwIfNotFound: true);
        m_Input_Spawn = m_Input.FindAction("Spawn", throwIfNotFound: true);
        m_Input_Teleport = m_Input.FindAction("Teleport", throwIfNotFound: true);
        m_Input_Complete = m_Input.FindAction("Complete", throwIfNotFound: true);
        m_Input_Undo = m_Input.FindAction("Undo", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Input
    private readonly InputActionMap m_Input;
    private IInputActions m_InputActionsCallbackInterface;
    private readonly InputAction m_Input_Spawn;
    private readonly InputAction m_Input_Teleport;
    private readonly InputAction m_Input_Complete;
    private readonly InputAction m_Input_Undo;
    public struct InputActions
    {
        private @Listener m_Wrapper;
        public InputActions(@Listener wrapper) { m_Wrapper = wrapper; }
        public InputAction @Spawn => m_Wrapper.m_Input_Spawn;
        public InputAction @Teleport => m_Wrapper.m_Input_Teleport;
        public InputAction @Complete => m_Wrapper.m_Input_Complete;
        public InputAction @Undo => m_Wrapper.m_Input_Undo;
        public InputActionMap Get() { return m_Wrapper.m_Input; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputActions set) { return set.Get(); }
        public void SetCallbacks(IInputActions instance)
        {
            if (m_Wrapper.m_InputActionsCallbackInterface != null)
            {
                @Spawn.started -= m_Wrapper.m_InputActionsCallbackInterface.OnSpawn;
                @Spawn.performed -= m_Wrapper.m_InputActionsCallbackInterface.OnSpawn;
                @Spawn.canceled -= m_Wrapper.m_InputActionsCallbackInterface.OnSpawn;
                @Teleport.started -= m_Wrapper.m_InputActionsCallbackInterface.OnTeleport;
                @Teleport.performed -= m_Wrapper.m_InputActionsCallbackInterface.OnTeleport;
                @Teleport.canceled -= m_Wrapper.m_InputActionsCallbackInterface.OnTeleport;
                @Complete.started -= m_Wrapper.m_InputActionsCallbackInterface.OnComplete;
                @Complete.performed -= m_Wrapper.m_InputActionsCallbackInterface.OnComplete;
                @Complete.canceled -= m_Wrapper.m_InputActionsCallbackInterface.OnComplete;
                @Undo.started -= m_Wrapper.m_InputActionsCallbackInterface.OnUndo;
                @Undo.performed -= m_Wrapper.m_InputActionsCallbackInterface.OnUndo;
                @Undo.canceled -= m_Wrapper.m_InputActionsCallbackInterface.OnUndo;
            }
            m_Wrapper.m_InputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Spawn.started += instance.OnSpawn;
                @Spawn.performed += instance.OnSpawn;
                @Spawn.canceled += instance.OnSpawn;
                @Teleport.started += instance.OnTeleport;
                @Teleport.performed += instance.OnTeleport;
                @Teleport.canceled += instance.OnTeleport;
                @Complete.started += instance.OnComplete;
                @Complete.performed += instance.OnComplete;
                @Complete.canceled += instance.OnComplete;
                @Undo.started += instance.OnUndo;
                @Undo.performed += instance.OnUndo;
                @Undo.canceled += instance.OnUndo;
            }
        }
    }
    public InputActions @Input => new InputActions(this);
    public interface IInputActions
    {
        void OnSpawn(InputAction.CallbackContext context);
        void OnTeleport(InputAction.CallbackContext context);
        void OnComplete(InputAction.CallbackContext context);
        void OnUndo(InputAction.CallbackContext context);
    }
}
